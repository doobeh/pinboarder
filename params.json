{"name":"Pinboarder","tagline":"Pinboard.in Weblog Generator","body":"# Pinboarder\r\n\r\n### In short\r\nPinboarder turns a [Pinboard][pinboard] feed into a mostly functional Blog system.\r\n\r\n### But why?!\r\n[Pinboard.in][pinboard] is a social bookmarking site that gathers and keeps your\r\nfavourite links in order.  It makes sense that if you're already collecting the\r\nbest of the web in one place and you wanted to start a curation type blog, then\r\nbeing able to tie the blog system into your Pinboard account would\r\nseem like a very good idea indeed.\r\n\r\n### So, how does it work?\r\nPinboard has a very accessible API, if you want to view all the shared links from\r\n\"Chaos\", well you can just go to\r\n[http://feeds.pinboard.in/json/v1/u:chaos][1] and you'll get a nice json stream\r\nof all the posts.  Further, if you wish to only view posts tagged with \"Apple\"\r\nyou can simply go to [http://feeds.pinboard.in/json/v1/u:chaos/t:Apple/][2].\r\n\r\nWhat Pinboarder does is create a small database, and then queries Pinboard\r\nfor all the posts at a particular feed, it runs down the list and creates\r\nentries for all the bookmarked posts.  Then you can just login to the admin\r\nside of the site and manage the posts, edit the content here and there (by\r\ndefault it'll pull in the Pinboard notes) or hide it from public view.\r\n\r\nIt also creates a unique hash of each of the posts, so even if you change\r\nthe title, it will know not to import the old one next time you run an\r\nupdate.\r\n\r\n### Hmm, okay, so.. how do I run it?\r\n* Git clone the repository to your computer\r\n* Create a Python virtual environment and activate it\r\n* Install the requirements (```pip install -r requirements.txt```)\r\n* Create the initial database ```setup.py```  (edit this to set the default admin).\r\n* Run the server ```rundebug.py```\r\n* Access the site at [http://127.0.0.1:5000][3]\r\n\r\nI'll add a better deployment mechanism so you can very easily deploy an instance\r\nto the wonderful Heroku.\r\n\r\n### Anything else?\r\nI shall be documenting this project on my site soon, and I'll leave a link here\r\nwhen I do-- mostly as a tutorial for new people coming into the Flask web\r\ndevelopment framework.\r\n\r\nLots of tweaks required in the not too distant future--\r\n* The pinboard refresh function is fired on request at the\r\nmoment, it should run automatically in the background really.\r\n* The Feed url is hardcoded in the ```config.py``` file at the moment, I should\r\nmove that into the admin interface.\r\n* Be a good neighbour and query Pinboard in a more frugal way. At present when a\r\nupdate is requested, all the posts matching are returned, if a user had thousands\r\nof posts that would be a bit unfair to Pinboard's bandwidth.  Instead it should\r\nmemorize the last sucessful update, then just ask the Pinboard API for all posts newer\r\nthan that time.\r\n* Improve the user interface so it's a working theme that someone might actually\r\nbe happy to use.  Maybe even add some theme options if I get really productive.\r\n* Add a few blueprints to break the site apart, at least to document in the\r\ntutorial to make it a more complete introduction.\r\n\r\n[1]: http://feeds.pinboard.in/json/v1/u:chaos\r\n[2]: http://feeds.pinboard.in/json/v1/u:chaos/t:Apple/\r\n[3]: http://127.0.0.1:5000\r\n[pinboard]: http://www.pinboard.in \"Pinboard Bookmarks\"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}